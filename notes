1. we can see the html of any file in the inspect->elements
2. we also get the css in the inspect-> under the elements
3. we can see the javascript in the console
4. Window Object -> the window object represents an open window in a browser. it is browser,s object(not javascript)
   and automatically created ny the browser
   It is a global object with lots of properties and methods

   for eg. if we write window.alert("Hello") // it is also right coz alert is the part of window but we do not need to write it again and again
   as it is self understandable by browser

5. DOM -> Document Object Model 
    console.log -> print
    console.dir -> document->properties
     When a page is loaded, The browser creates a Documenet Object Model(DOM) of the page

     We can access the Html of the page using the java script also 
     Inspect->console->Window (The window has so many objects and one of them is Document which contains all the html of the page)

     access of HTML using javascript
     window.Document
     console.dir(window.Documenet)    //to print the object we use console.dir
     we can also access the individual part like
     console.dir(document.body)

6. WHY DOM IS USED??
  when we want to do some changes in the website dynamically after the input or action from the user in that casse we use DOM
  and it is called DOM Manipulation

  DOM Manipulation

  selecting with id
  document.getElementById("myID") //id is represented by #id and it is unique

  selecting with class
  document.getElementsByClassName("myClass") // represented by .className // it returns the HTML collection which is similar to the Array and have properties like length

  selecting with tagName
  document.getElementsByTagName("p")  // it also return the HTML collection

  using QuerySelector 

  querySelector only retun the first element that matches to the it
  
  ~ document.querySelector("myId/myClass/tag") //returns the first elements
  we can pass anything tag/id/class in it 
  if want to pass the id -> #id
  if want to pass the class -> .class

  ~document.querySelectorAll("myId/myClass/tag") //returns all the elemnts matching to that tag
  in this also we can pass anything
  it returns the Nodelist of the elements
  we can access them using index for example divs[1]


  Properties of DOM -> we can set or get the properties of elements


  1. tagName : returns tag for the element Node
  2. innerText : returns the text content of the element and all its Children
  3. innerHTML : returns the plain text or HTML contents in the element
  4. textContent : returns textual content even for the hidden elements


  DOM Manipulation -> Attributes

  Attributes are the different properties given to the tags
  for example id , class , src(link in image )

  now we can set and get these Attributes
  ~getAttribute(attr) //to get the Attributes
  ~setAttributes(attr,value) //to set the attribute value

  ~ node.style -> we can access all the styling of that element


  Insert elements

  1. CREATE THE ELEMENT 
  2. ADD THE ELEMENT

  // let el = document.createElement("div")
  
  Insert elements
  ~ node.append(el)   //adds at the end of the node(inside)
  ~ node.prepend(el) //adds at the start of the node (inside)
  ~ node.before(el) //adds before the node (outside)
  ~ node.after(el) //adds after the node (outside)

  Delete the element
  ~ node.remove() //remove the node


EVENTS

The change in the state of an object is known as an event
Events are fired to notify code of interesting changes that may affect the code execution

~Mouse events ( click, double click etc)
~Keyboard events ( keypress, keyup, keydown)
~Form events(submit etc)
~print event and many more

example there are attributes 
~onclick
~ondbclick
~mouseover


1. if we have write the event handling  in the inline html file and also in javascript then the preference will be given to javascript evenHandlind

2. if there are more than two function handling the second one than the most recent one overwrite the previous one

EVENT OBJECT

it is a special object that has details about the event.
All the event handlers have access to the Event Object properties and methods

node.event=(e) =>
{
   //handle here
}


examples
~ e.target -> where wwas the even occur
~ e.type -> tell what type of the event it was
~ e.clientX -> horizantal X position where event was occur
~ e.clientY -> vertical Y position where the event was occur



Drawback of above two type of handling the event is that 
1. inline event made the code bulky
2. seperately in javascript we can not handle more than on event on the same action as event overwrite

so we have the 3rd type of event handling and that is through Event Listners

EVENT LISTNERS

we can make multiple events occuring for the same action and oaal of them get triggered for that particular action

node.addEventListner(event for eg. "click" , callabck);

node.removeEventListner(event , callback )   
now one imp. point for the above is that for example if we make two functions for the same event one is add and then another is remove than it will not works as we desire to remove because they are store seperately in the memory and getting executed seperately.

so note : the call back reference should be same to remove

~toggle button => when it switch between two states

css in javascript
.style.backgroudColor("dark);

css throught css file in javascript
.classList.add("dark")
//dark is stying in css like .class{
   //css code
}


//CLASSESS and OBJECTS IN JAVASCRIPT

Prototypes in javaScript

A javascipt objecct is an entity having sate and behaviour (properties and methods)

JS object have a special property called prototype , it is by defualt property of each object which contains different methods and behaviour
We can set prototype using  __proto__
Prototype itslef an object, inside an object which contain spection properties and methods
we can also make our own prototypes
the typeof object is mainly the reference to an object which can be null also

note: if object and the prototype have same method, object method will be used

-> the typeof array internally in javascript is object not array
so array object also contain the prototype object whole all methods are inherited in array 
for example we can use array.push();

When we have to crate the objects with the simlar information we create them using classes
classes give us the blueprint or the template for creating objects

Constructor
-> automatically invoked by new keyword
-> initialize the object

Inheritance
-> inheritance is passing down properties and methods fromn parent class to child class.
-> if parent class and the child class have the same function than the method of child class will be executed and this is called method overriding.

SUPER Keyword
The super Kreyword is used to call the constructor of its parent class to access the parents properties and methods
super(args) //calls Parent Constructor
super.parentMethod(args);

-> If we make a constructor in the child class than it is compulsory for the child class constructor to call the parent class contructor before using the this keyword in the child class constructor and exiting the child class constructor.
-> If we want to pass on the some important information to the parent constructor through the child constructor than we use the super keyword



ASYNCHRONOUS PROGRAMMING IN JAVASCRIPT

async await >> promise chains >> callback hell

-> synchronous - Synchronous means the code runs in a particular sequence of instructions given in the program. Each instruction waits for the previous instruction to complete its execution

-> asynchronous - due to sync programming sometimes imp instructions get blocked due to some previous instructions, which cause a delay in the UI. Async code execution allows to execute next instructions immediately and doesn't block the flow.

-> Callback- a function that is passed as a argument to the another function.

->Callback Hell - Nested callbacks stacked below one another forming a pyramid structure.
This stype of programming becomes difficult to understand and manange.

To solve the problem of callback hell we uses the concept of promises

->Promises is for "eventual" completion of task. Its is an object in JS. It is a solution to callback hell.

//resolve and reject are the two handlers or the callbacks that are being provided by the javascript
let promise = new Promise((resolve,reject)=>{

});

state of Promise are 
1. pending - the result is undefined
2. resolved - the result is a value (fulfilled)
3. rejected - the result is a error

->In general programming we do not create the promises while sending a request for API it send us a promise which we later use to handel our data or deal with the data.

.then() & .catch()

//after fullfil of promise
promise.then((res)=>{

});

//after rejection of promise
promise.catch((err)=>{

});

-> Promise Chains - promise inside a promise
 
->async- Await


async function always returns a promise.
async function myFunc(){....}

await pauses the execution of its surroundings async function until the promise is settled
*await keyword can only be used inside a async function

An IIFE (Immediately invoked function expression) is a javascript function that runs as soon as it is created whithout a call, It is executed only once;

(functio(){

})();


API - Application Programming Interface

fetch API provides an interface for fetching (sending/receiving) resourses.

it uses Request and Response objects.

The fetch() method is used to fetch a resourse(data).

let promise = fetch(url,[options]);
//here fetch return a promise
//status: 200 means request successful

-> when we do not write any option it by default takes the getRequest
->the reposne we are getting is in different format as of when brwoser is sending the same request and also it is not in readable form 
-> So to undersatand this we need to undersatn some common terms which are as follows

UNDERSTANDING SOME TERMS

1. AJAX is asynchronous JavaScript and XML
->Earlier when there was no modern JavaScript data used to come in the XML data format but now it comes in json format. so we can call the APIs AJAJ asynchronous JavaScript and JSON , but this term is not very popular so eventhough we have JSON instead of XML we still use the term AJAX.
2. JSON is JavaScript Object Notation
3. json() method: return the second promise that resolves with the result of parsing the response body text as JSON. (Input Is JSON , output is JavaScript object)
json() method actually return the javaScript object and is used to convert the JSON -> javaScript Object , which is a usable data

//HTTP verbs - GET,PUT,DELETE
//HTTP response codes 
1. client error response(400 - 499)
2. server error response(500 - 599)

*HTTP response headers also contain details about the responses, such as content type, HTTP status code etc -- they contain some additonal information



